// Generated by CoffeeScript 1.6.3
(function() {
  (function($) {
    var ARROW_HEIGHT, ARROW_WIDTH, BORDER_COLOR, CURSOR_DISTANCE, MAX_TOOLTIP_COUNT, OVERFLOW_LIMIT, TOOLTIP_BORDER, TOOLTIP_DISTANCE, ViewContextDisplay, ViewContextGroup;
    ARROW_WIDTH = 20;
    ARROW_HEIGHT = 12;
    TOOLTIP_DISTANCE = 5;
    TOOLTIP_BORDER = 1;
    OVERFLOW_LIMIT = 20;
    CURSOR_DISTANCE = 11;
    MAX_TOOLTIP_COUNT = 12;
    BORDER_COLOR = "#dddddd";
    ViewContextGroup = (function() {
      ViewContextGroup.removeTooltips = function() {
        return $('.chart-tooltip-part').not(".permanent").remove();
      };

      ViewContextGroup.hasPermanent = function() {
        return $('.chart-tooltip-part').filter(".permanent").length > 0;
      };

      ViewContextGroup.removeAll = function() {
        return $('.chart-tooltip-part').remove();
      };

      function ViewContextGroup(reportId, contents) {
        var content, i, orientation, _i, _len;
        if (contents == null) {
          contents = [];
        }
        this.displays = [];
        orientation = (contents != null ? contents.length : void 0) > 1 ? "horizontal" : "vertical";
        for (i = _i = 0, _len = contents.length; _i < _len; i = ++_i) {
          content = contents[i];
          if (i < MAX_TOOLTIP_COUNT) {
            this.displays.push(new ViewContextDisplay(reportId, orientation, content));
          }
        }
        this.displays.sort(function(a, b) {
          return a.target.y - b.target.y;
        });
      }

      ViewContextGroup.prototype.show = function(permanent) {
        var display, limit, _i, _len, _ref, _results;
        if (permanent == null) {
          permanent = false;
        }
        if (ViewContextGroup.hasPermanent()) {
          if (permanent) {
            ViewContextGroup.removeAll();
          } else {
            return;
          }
        }
        ViewContextGroup.removeTooltips();
        limit = {
          left: void 0,
          right: void 0
        };
        _ref = this.displays;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          display = _ref[_i];
          display.prepare();
          display.determinePosition(limit, permanent);
          _results.push(display.show());
        }
        return _results;
      };

      return ViewContextGroup;

    })();
    ViewContextDisplay = (function() {
      function ViewContextDisplay(reportId, orientation, content) {
        var _ref, _ref1, _ref2, _ref3;
        this.reportId = reportId;
        this.orientation = orientation;
        this.side = orientation === "horizontal" ? "right" : "bottom";
        this.dataId = content.dataId;
        this.values = (_ref = content.values) != null ? _ref : [];
        this.background = (_ref1 = content.background) != null ? _ref1 : "#FFF";
        this.foreground = (_ref2 = content.foreground) != null ? _ref2 : "#000";
        this.commentForeground = (_ref3 = content["comment-foreground"]) != null ? _ref3 : "#000";
        this.target = content.target;
        this.showData = content["show-data"];
        this.quickChart = content["quick-chart"];
        this.appearance = content["appearance"];
        this.addFilter = content["add-filter"];
        this.removeFilter = content["remove-filter"];
        this.appearanceUrl = content["appearance-url"];
        this.drilldown = content.drilldown;
        this.position = {
          x: this.target.x,
          y: this.target.y
        };
      }

      ViewContextDisplay.prototype.addComment = function(collection) {
        var area, button, data, text,
          _this = this;
        area = this.$el.find(".add-comment-area");
        button = this.$el.find(".add-comment-button");
        text = area.val();
        if (text) {
          this.$el.focus();
          button.prop('disabled', true);
          data = this.dataId != null ? {
            text: text,
            dataId: this.dataId
          } : {
            text: text
          };
          BDComments.content[this.reportId].create(data, {
            complete: function() {
              button.prop('disabled', false);
              return _this.updateCommentDisplay();
            }
          });
          area.val("");
          return area.removeClass("t-error");
        } else {
          return area.addClass("t-error");
        }
      };

      ViewContextDisplay.prototype.prepare = function() {
        var commentContainer, drilldownContainer, i, iconContainer, partItem, value, valueContainer, valueContainers, valueGroups, values, _i, _j, _len, _len1, _ref,
          _this = this;
        this.$el = $("<div class='chartTooltip chart-tooltip-part'/>").attr("tabindex", -1);
        iconContainer = $("<ul class='tooltip-icon-container' />");
        valueContainers = $("<div class='tooltip-value-containers' />");
        drilldownContainer = $("<div class='tooltip-drilldown-container' />");
        commentContainer = $("<div class='tooltip-comment-container' />");
        this.$el.append(iconContainer);
        this.$el.append(valueContainers);
        this.$el.append(drilldownContainer);
        this.$el.append(commentContainer);
        this.$el.on("mousemove", function() {
          return ViewContextGroup.removeTooltips();
        });
        this.appendIcon(iconContainer, this.showData, "icon-dataset", "Source Data");
        this.appendIcon(iconContainer, this.quickChart, "icon-chart-pie", "Quick Chart");
        this.appendIcon(iconContainer, this.addFilter, "icon-filter-add", "Add to Filter");
        this.appendIcon(iconContainer, this.removeFilter, "icon-filter-remove", "Remove from Filter");
        this.appendIcon(iconContainer, this.appearance, "icon-content-layout", "Translation & Appearance");
        this.appendLinkIcon(iconContainer, this.appearanceUrl, "icon-link", "Appearance URL");
        valueGroups = this.values.length === 0 ? [[]] : this.values[0] instanceof Array ? this.values : [this.values];
        for (i = _i = 0, _len = valueGroups.length; _i < _len; i = ++_i) {
          values = valueGroups[i];
          valueContainer = $("<ul class='tooltip-value-container' />");
          valueContainers.append(valueContainer);
          for (_j = 0, _len1 = values.length; _j < _len1; _j++) {
            value = values[_j];
            if (!((value != null ? $.trim(value).length : void 0) > 0)) {
              continue;
            }
            partItem = $("<li />");
            partItem.text(value);
            valueContainer.append(partItem);
          }
          if (valueContainer.children().length === 0) {
            valueContainer.append($("<li />").html("&nbsp;"));
          }
          valueContainer.children(":last").css("border", "0");
          valueContainer.css("background-color", this.background instanceof Array ? this.background[i] : this.background);
          valueContainer.css("color", this.foreground instanceof Array ? this.foreground[i] : this.foreground);
          if ((_ref = valueContainer.css("background-color")) === "rgb(255, 255, 255)" || _ref === "rgb(255,255,255)" || _ref === "#FFF" || _ref === "#FFFFFF") {
            valueContainer.css("border", "1px solid " + BORDER_COLOR);
          }
        }
        $("body").append(this.$el);
        this.$el.find(".tooltip-comment-container, .tooltip-drilldown-container").width(this.$el.find(".tooltip-value-container").outerWidth());
        this.buildDrilldownContent(drilldownContainer);
        this.buildCommentContent(commentContainer);
        this.updateCommentDisplay();
        this.$el.css("border-width", TOOLTIP_BORDER + "px");
        return this.$el.css("border-color", BORDER_COLOR);
      };

      ViewContextDisplay.prototype.appendIcon = function(container, action, iconClass, iconTitle) {
        var dataIcon;
        if (action != null) {
          dataIcon = $("<li />");
          dataIcon.append($("<i />").addClass(iconClass));
          dataIcon.attr("title", iconTitle);
          dataIcon.on("click", function() {
            return action();
          });
          return container.append(dataIcon);
        }
      };

      ViewContextDisplay.prototype.appendLinkIcon = function(container, url, iconClass, iconTitle) {
        var dataIcon, link;
        if (url != null) {
          dataIcon = $("<li />");
          link = $("<a href='" + url + "' target='_blank' />");
          link.append($("<i />").addClass(iconClass));
          dataIcon.append(link);
          dataIcon.attr("title", iconTitle);
          return container.append(dataIcon);
        }
      };

      ViewContextDisplay.prototype.buildDrilldownContent = function(container) {
        var buildSelect, _ref, _ref1, _ref2, _ref3, _ref4,
          _this = this;
        if ((((_ref = this.drilldown) != null ? _ref.submit : void 0) != null) && ((this.drilldown["get-data"] != null) || ((_ref1 = this.drilldown) != null ? (_ref2 = _ref1.data) != null ? _ref2.length : void 0 : void 0) > 0)) {
          buildSelect = function(data) {
            var ddSelect, ddSubsetSelect, item, setDdButton, updateSubsets, _i, _len;
            ddSelect = $("<select class='drilldown-select' />");
            for (_i = 0, _len = data.length; _i < _len; _i++) {
              item = data[_i];
              ddSelect.append($("<option value='" + item.id + "' />").text(item.name));
            }
            ddSubsetSelect = $("<select class='drilldown-subset-select' />");
            setDdButton = $("<button class='btn primary set-drilldown-button' />").text("Set drilldown");
            setDdButton.on("click", function() {
              return _this.drilldown.submit(ddSelect.val(), ddSubsetSelect.val());
            });
            container.append(ddSelect);
            container.append(ddSubsetSelect);
            container.append(setDdButton);
            updateSubsets = function() {
              ddSubsetSelect.prop("disabled", true);
              return _this.drilldown["get-subsets"](ddSelect.val(), function(subsets) {
                var subset, _j, _len1, _results;
                ddSubsetSelect.empty();
                if ((subsets != null ? subsets.length : void 0) > 0) {
                  ddSubsetSelect.show();
                  ddSubsetSelect.prop("disabled", false);
                  ddSubsetSelect.append($("<option />"));
                  _results = [];
                  for (_j = 0, _len1 = subsets.length; _j < _len1; _j++) {
                    subset = subsets[_j];
                    _results.push(ddSubsetSelect.append($("<option value='" + subset.id + "' />").text(subset.name)));
                  }
                  return _results;
                } else {
                  return ddSubsetSelect.hide();
                }
              });
            };
            if (_this.drilldown["get-subsets"] != null) {
              updateSubsets();
              return ddSelect.on("change", updateSubsets);
            }
          };
          if (((_ref3 = this.drilldown) != null ? (_ref4 = _ref3.data) != null ? _ref4.length : void 0 : void 0) > 0) {
            return buildSelect(this.drilldown.data);
          } else if (this.drilldown["get-data"] != null) {
            return this.drilldown["get-data"](function(drilldowns) {
              return buildSelect(drilldowns);
            });
          }
        }
      };

      ViewContextDisplay.prototype.buildCommentContent = function(container) {
        var addCommentArea, addCommentButton, addCommentContainer, commentItemContainer, comments, _ref, _ref1, _ref2,
          _this = this;
        if ((this.dataId != null) && (this.reportId != null) && ((typeof BDComments !== "undefined" && BDComments !== null ? (_ref = BDComments.content) != null ? _ref[this.reportId] : void 0 : void 0) != null)) {
          comments = (_ref1 = (_ref2 = BDComments.content[this.reportId]) != null ? typeof _ref2.filterByDataId === "function" ? _ref2.filterByDataId(this.dataId) : void 0 : void 0) != null ? _ref1 : [];
          addCommentContainer = $("<div class='add-comment-container' />");
          addCommentArea = $("<textarea class='add-comment-area' />");
          addCommentButton = $("<button class='btn primary add-comment-button' />").text("Add comment");
          addCommentButton.on("click", function() {
            return _this.addComment(comments);
          });
          addCommentContainer.append(addCommentArea);
          addCommentContainer.append(addCommentButton);
          container.append(addCommentContainer);
          commentItemContainer = $("<ul class='comment-item-container' />");
          return container.append(commentItemContainer);
        }
      };

      ViewContextDisplay.prototype.updateCommentDisplay = function() {
        var comment, commentItemContainer, comments, _i, _len, _ref, _ref1, _ref2;
        commentItemContainer = this.$el.find(".comment-item-container");
        commentItemContainer.empty();
        if ((this.dataId != null) && (this.reportId != null) && ((typeof BDComments !== "undefined" && BDComments !== null ? (_ref = BDComments.content) != null ? _ref[this.reportId] : void 0 : void 0) != null)) {
          comments = (_ref1 = (_ref2 = BDComments.content[this.reportId]) != null ? typeof _ref2.filterByDataId === "function" ? _ref2.filterByDataId(this.dataId) : void 0 : void 0) != null ? _ref1 : [];
          if ((comments != null ? comments.length : void 0) > 0) {
            for (_i = 0, _len = comments.length; _i < _len; _i++) {
              comment = comments[_i];
              commentItemContainer.append(this.buildCommentItem(comment));
            }
            return commentItemContainer.children(":last").css("border", "0");
          }
        }
      };

      ViewContextDisplay.prototype.buildCommentItem = function(comment) {
        var author, authorContainer, commentItem, commentRemove, commentText,
          _this = this;
        commentItem = $("<li />");
        commentRemove = $("<i class='remove-comment icon-delete-trash' />");
        commentRemove.on("click", function() {
          comment.destroy();
          return _this.updateCommentDisplay();
        });
        commentItem.append(commentRemove);
        author = comment.get("author");
        if (author && author.fullname) {
          authorContainer = $("<span class='comment-author' />");
          authorContainer.text(author.fullname);
          authorContainer.css("color", this.commentForeground);
          commentItem.append(authorContainer);
        }
        commentText = $("<span class='comment-text' />");
        commentText.text(comment.get("text"));
        commentItem.append(commentText);
        commentItem.css("border-color", this.commentForeground);
        return commentItem;
      };

      ViewContextDisplay.prototype.determinePosition = function(limit, permanent) {
        var overflow, scrollY;
        if (permanent == null) {
          permanent = false;
        }
        if (permanent) {
          this.$el.addClass("permanent");
        }
        overflow = {};
        scrollY = document.documentElement.scrollTop || document.body.scrollTop;
        if (this.orientation === "vertical") {
          overflow.left = this.target.x - this.$el[0].clientWidth / 2 < OVERFLOW_LIMIT;
          overflow.right = this.target.x + this.$el[0].clientWidth / 2 > document.documentElement.clientWidth - OVERFLOW_LIMIT;
          overflow.top = this.target.y - ARROW_HEIGHT - this.$el[0].clientHeight < OVERFLOW_LIMIT;
          overflow.bottom = this.target.y + ARROW_HEIGHT + this.$el[0].clientHeight - scrollY > document.documentElement.clientHeight - OVERFLOW_LIMIT;
          this.position.x -= this.$el[0].clientWidth / 2;
          if (overflow.bottom) {
            this.side = "top";
          }
          if (overflow.left) {
            this.position.x = OVERFLOW_LIMIT;
          }
          if (overflow.right) {
            this.position.x = document.documentElement.clientWidth - this.$el[0].clientWidth - OVERFLOW_LIMIT;
          }
        } else {
          overflow.left = this.target.x - ARROW_HEIGHT - this.$el[0].clientWidth < OVERFLOW_LIMIT;
          overflow.right = this.target.x + ARROW_HEIGHT + this.$el[0].clientWidth > document.documentElement.clientWidth - OVERFLOW_LIMIT;
          overflow.top = this.target.y - this.$el[0].clientHeight / 2 < OVERFLOW_LIMIT;
          overflow.bottom = this.target.y + this.$el[0].clientHeight / 2 - scrollY > document.documentElement.clientHeight - OVERFLOW_LIMIT;
          this.position.y -= this.$el[0].clientHeight / 2;
          if (overflow.right) {
            if ((limit.left != null) && this.position.y < limit.left) {
              this.position.y = limit.left;
            }
            this.side = "left";
          } else if (overflow.left) {
            if ((limit.right != null) && this.position.y < limit.right) {
              this.position.y = limit.right;
            }
            this.side = "right";
          } else if ((limit.right != null) && this.position.y < limit.right) {
            if ((limit.left == null) || this.position.y >= limit.left) {
              if (limit.left) {
                this.position.y = limit.left;
              }
              this.side = "left";
            } else {
              if (limit.left - this.position.y < limit.right - this.position.y) {
                this.position.y = limit.left;
                this.side = "left";
              } else {
                this.position.y = limit.right;
                this.side = "right";
              }
            }
          }
        }
        switch (this.side) {
          case "left":
            return limit.left = this.position.y + this.$el[0].clientHeight + TOOLTIP_DISTANCE;
          case "right":
            return limit.right = this.position.y + this.$el[0].clientHeight + TOOLTIP_DISTANCE;
        }
      };

      ViewContextDisplay.prototype.show = function() {
        var origin, position, removeHandler, target, _ref, _ref1,
          _this = this;
        origin = void 0;
        target = void 0;
        position = void 0;
        switch (this.side) {
          case "left":
            origin = {
              x: this.target.x - CURSOR_DISTANCE - ARROW_HEIGHT - TOOLTIP_BORDER,
              y: this.position.y + this.$el[0].clientHeight / 2
            };
            target = {
              x: this.target.x - CURSOR_DISTANCE,
              y: this.target.y
            };
            position = {
              x: origin.x - this.$el[0].clientWidth,
              y: this.position.y
            };
            break;
          case "right":
            origin = {
              x: this.target.x + CURSOR_DISTANCE + ARROW_HEIGHT + TOOLTIP_BORDER,
              y: this.position.y + this.$el[0].clientHeight / 2
            };
            target = {
              x: this.target.x + CURSOR_DISTANCE,
              y: this.target.y
            };
            position = {
              x: origin.x - TOOLTIP_BORDER,
              y: this.position.y
            };
            break;
          case "top":
            origin = {
              x: this.position.x + this.$el[0].clientWidth / 2,
              y: this.target.y - CURSOR_DISTANCE - ARROW_HEIGHT - TOOLTIP_BORDER
            };
            target = {
              x: this.target.x,
              y: this.target.y - CURSOR_DISTANCE
            };
            position = {
              x: this.position.x,
              y: origin.y - this.$el[0].clientHeight
            };
            break;
          case "bottom":
            origin = {
              x: this.position.x + this.$el[0].clientWidth / 2,
              y: this.target.y + CURSOR_DISTANCE + ARROW_HEIGHT + TOOLTIP_BORDER
            };
            target = {
              x: this.target.x,
              y: this.target.y + CURSOR_DISTANCE
            };
            position = {
              x: this.position.x,
              y: origin.y - TOOLTIP_BORDER
            };
        }
        if (((_ref = this.side) === "top" || _ref === "bottom") && origin.x !== target.x) {
          origin.x = Math.min(Math.max(position.x + ARROW_WIDTH / 2, target.x), position.x + this.$el[0].clientWidth - ARROW_WIDTH / 2);
        }
        if (((_ref1 = this.side) === "left" || _ref1 === "right") && origin.y !== target.y) {
          origin.y = Math.min(Math.max(position.y + ARROW_WIDTH / 2, target.y), position.y + this.$el[0].clientHeight - ARROW_WIDTH / 2);
        }
        this.arrow = this.drawArrow(origin, target, this.orientation, this.$el.is(".permanent"));
        this.$el.css("left", position.x + "px");
        this.$el.css("top", position.y + "px");
        if (this.$el.is(".permanent")) {
          this.$el.focus();
          this.$el.find(".add-comment-area").focus();
          removeHandler = function() {
            return _.defer(function() {
              var active;
              active = document.activeElement;
              if (_this.$el.has($(active)).length === 0 && !_this.$el.is($(active))) {
                return _this.remove();
              }
            });
          };
          this.$el.on("blur", removeHandler);
          return this.$el.find("textarea, button, select").on("blur", removeHandler);
        }
      };

      ViewContextDisplay.prototype.remove = function() {
        var _ref;
        this.$el.remove();
        return (_ref = this.arrow) != null ? _ref.remove() : void 0;
      };

      ViewContextDisplay.prototype.drawArrow = function(origin, target, direction, permanent) {
        var attached, background, context, elem, foreground, maxX, maxY, minX, minY, sideWidth;
        if (permanent == null) {
          permanent = false;
        }
        minX = void 0;
        minY = void 0;
        maxX = void 0;
        maxY = void 0;
        sideWidth = ARROW_WIDTH / 2 + TOOLTIP_BORDER;
        if (direction === "vertical") {
          minX = Math.min(origin.x - sideWidth, target.x);
          minY = Math.min(origin.y, target.y);
          maxX = Math.max(origin.x + sideWidth, target.x);
          maxY = Math.max(origin.y, target.y);
        } else {
          minX = Math.min(origin.x, target.x);
          minY = Math.min(origin.y - sideWidth, target.y);
          maxX = Math.max(origin.x, target.x);
          maxY = Math.max(origin.y + sideWidth, target.y);
        }
        elem = $("<canvas class='chartTooltipArrow chart-tooltip-part' />");
        if (elem[0].getContext != null) {
          elem.on("mousemove", function() {
            return ViewContextGroup.removeTooltips();
          });
          elem.attr("width", maxX - minX);
          elem.attr("height", maxY - minY);
          context = elem[0].getContext("2d");
          context.lineWidth = TOOLTIP_BORDER + 1;
          context.fillStyle = "#ffffff";
          context.strokeStyle = BORDER_COLOR;
          context.beginPath();
          if (direction === "vertical") {
            context.moveTo(origin.x - minX - sideWidth, origin.y - minY);
            context.lineTo(target.x - minX, target.y - minY);
            context.lineTo(origin.x - minX + sideWidth, origin.y - minY);
          } else {
            context.moveTo(origin.x - minX, origin.y - minY - sideWidth);
            context.lineTo(target.x - minX, target.y - minY);
            context.lineTo(origin.x - minX, origin.y - minY + sideWidth);
          }
          context.stroke();
          context.fill();
          context.closePath();
        } else {
          elem = $("<div class='chart-tooltip-part chartTooltipArrowBgIE' /><div class='chart-tooltip-part chartTooltipArrowIE' />");
          background = $(elem[0]);
          foreground = $(elem[1]);
          if (direction === "vertical") {
            attached = origin.y > target.y ? "bottom" : "top";
            foreground.css("border-left", "" + (ARROW_WIDTH / 2) + " solid transparent");
            foreground.css("border-right", "" + (ARROW_WIDTH / 2) + " solid transparent");
            foreground.css("border-" + attached, "" + (ARROW_HEIGHT + 1) + " solid #FFF");
          } else {
            attached = origin.x > target.x ? "right" : "left";
            foreground.css("border-top", "" + (ARROW_WIDTH / 2) + " solid transparent");
            foreground.css("border-bottom", "" + (ARROW_WIDTH / 2) + " solid transparent");
            foreground.css("border-" + attached, "" + (ARROW_HEIGHT + 1) + " solid #FFF");
          }
          if (direction === "vertical") {
            background.css({
              "margin-left": "-1px"
            });
            attached = origin.y > target.y ? "bottom" : "top";
            background.css("border-left", "" + (ARROW_WIDTH / 2 + 1) + " solid transparent");
            background.css("border-right", "" + (ARROW_WIDTH / 2 + 1) + " solid transparent");
            background.css("border-" + attached, "" + (ARROW_HEIGHT + 2) + " solid " + BORDER_COLOR);
            if (attached === "bottom") {
              background.css({
                "margin-top": "-1px"
              });
            }
          } else {
            background.css({
              "margin-top": "-1px"
            });
            attached = origin.x > target.x ? "right" : "left";
            background.css("border-top", "" + (ARROW_WIDTH / 2 + 1) + " solid transparent");
            background.css("border-bottom", "" + (ARROW_WIDTH / 2 + 1) + " solid transparent");
            background.css("border-" + attached, "" + (ARROW_HEIGHT + 2) + " solid " + BORDER_COLOR);
            if (attached === "right") {
              background.css({
                "margin-left": "-1px"
              });
            }
          }
        }
        $("body").append(elem);
        elem.css("left", minX + "px");
        elem.css("top", minY + "px");
        if (permanent) {
          elem.addClass("permanent");
        }
        return elem;
      };

      return ViewContextDisplay;

    })();
    return window.ViewContextGroup = ViewContextGroup;
  })(jQuery);

}).call(this);
